// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.4
// LVGL version: 8.3.6
// Project name: giga_synth_controls

#include "ui.h"

#include "../../settings/settings.h"


namespace {
  uint32_t GetRollerSelected(lv_event_t* e) {
    const lv_obj_t* roller = lv_event_get_target(e);
    return lv_roller_get_selected(roller);
  }

  int32_t GetArcValue(lv_event_t* e) {
    const lv_obj_t* arc = lv_event_get_target(e);
    return lv_arc_get_value(arc);
  }

  double ScaleOperatorRatio(const int32_t value) {
    return value / 2.0;
  }

  double ScaleOperatorLevel(const int32_t value) {
    return value / 100.0;
  }

  double GetOperatorRatio(lv_event_t* e) {
    return ::ScaleOperatorRatio(::GetArcValue(e));
  }

  double GetOperatorLevel(lv_event_t* e) {
    return ::ScaleOperatorLevel(::GetArcValue(e));
  }

  typedef std::pair<lv_coord_t, lv_coord_t> Dimensions;
  typedef std::pair<lv_coord_t, lv_coord_t> Coordinates;
  typedef struct {
    Dimensions dimensions;
    Coordinates coordinates;
  } Surface;

  void SetWidgetDimensions(lv_obj_t* const widget, const Dimensions& dimensions) {
    lv_obj_set_width(widget, dimensions.first);
    lv_obj_set_height(widget, dimensions.second);
  }

  void SetWidgetCoordinates(lv_obj_t* const widget, const Coordinates& coordinates) {
    lv_obj_set_x(widget, coordinates.first);
    lv_obj_set_y(widget, coordinates.second);
  }

  void SetWidgetSurface(lv_obj_t* const widget, const Surface& surface) {
    ::SetWidgetDimensions(widget, surface.dimensions);
    ::SetWidgetCoordinates(widget, surface.coordinates);
  }

  void SetAlgorithmBarSurfaces(const std::initializer_list<Surface>& surfaces) {
    constexpr auto kAlgorithmBarsCount = 11;
    static const std::array<lv_obj_t*, kAlgorithmBarsCount> kAlgorithmBars{
      ui_algorithm_bar_1, 
      ui_algorithm_bar_2,
      ui_algorithm_bar_3,
      ui_algorithm_bar_4,
      ui_algorithm_bar_5,
      ui_algorithm_bar_6,
      ui_algorithm_bar_7,
      ui_algorithm_bar_8,
      ui_algorithm_bar_9,
      ui_algorithm_bar_10,
      ui_algorithm_bar_11
    };

    for (auto [i, it_surfaces] = std::make_pair(0L, surfaces.begin()); i < kAlgorithmBars.size(); ++i) {
    if (it_surfaces != surfaces.end()) {
        ::SetWidgetSurface(kAlgorithmBars.at(i), *it_surfaces);
        ++it_surfaces;
    } else {
        static constexpr Surface kDefaultAlgorithmBarSurface = { {6, 20}, {322, 5} };
        ::SetWidgetSurface(kAlgorithmBars.at(i), kDefaultAlgorithmBarSurface);
    }
    }
  }

  void SetOperatorsButtonsCoordinates(const std::initializer_list<Coordinates>& coordinates) {
    constexpr auto kOperatorsButtonsCount = 6;
    static const std::array<lv_obj_t*, kOperatorsButtonsCount> kOperatorButtons{
      ui_operator_1_button,
      ui_operator_2_button,
      ui_operator_3_button,
      ui_operator_4_button,
      ui_operator_5_button,
      ui_operator_6_button
    };

    for (auto [i, it_coordinates] = std::make_pair(0L, coordinates.begin()); i < kOperatorButtons.size(); ++i, ++it_coordinates) {
    ::SetWidgetCoordinates(kOperatorButtons.at(i), *it_coordinates);
    }
  }

  void DrawAlgorithm(const std::initializer_list<Surface>& algorithm_bars_surfaces, const std::initializer_list<Coordinates>& operators_buttons_coordinates) {
    ::SetAlgorithmBarSurfaces(algorithm_bars_surfaces);
    ::SetOperatorsButtonsCoordinates(operators_buttons_coordinates);
  }
}


void OnFmEngineButtonClicked(lv_event_t * e) {
  Settings::Instance().SetAudioEngineType(Settings::AudioEngineType::kFm);
}

void OnSamplerEngineButtonClicked(lv_event_t * e) {
  Settings::Instance().SetAudioEngineType(Settings::AudioEngineType::kSampler);
}

void OnAdditiveEngineButtonClicked(lv_event_t * e) {
  Settings::Instance().SetAudioEngineType(Settings::AudioEngineType::kAdditive);
}

void OnSubtractiveEngineButtonClicked(lv_event_t * e) {
  Settings::Instance().SetAudioEngineType(Settings::AudioEngineType::kSubtractive);
}

void OnAlgorithmRollerValueChanged(lv_event_t * e) {
  const auto algorithm = ::GetRollerSelected(e);
  switch (algorithm) {
    case 0:
        ::DrawAlgorithm({ {{18, 6}, {415, -268}}, {{6, 43}, {427, -268}}, {{58, 6}, {374, -305}}, {{111, 6}, {269, -9}}, {{6, 94}, {269, -9}}, {{6, 302}, {374, -9}} },
                        { {230, -24}, {230, -98}, {335, -24}, {335, -98}, {335, -172}, {335, -246} });
        break;
    case 1:
        ::DrawAlgorithm({ {{18, 6}, {310, -120}}, {{6, 43}, {322, -120}}, {{58, 6}, {269, -157}}, {{111, 6}, {269, -9}}, {{6, 154}, {269, -9}}, {{6, 242}, {374, -9}} },
                        { {230, -24}, {230, -98}, {335, -24}, {335, -98}, {335, -172}, {335, -246} });
        break;
    case 2:
        ::DrawAlgorithm({ {{18, 6}, {415, -194}}, {{6, 43}, {427, -194}}, {{58, 6}, {374, -231}}, {{111, 6}, {269, -9}}, {{6, 168}, {269, -9}}, {{6, 228}, {374, -9}} },
                        { {230, -24}, {230, -98}, {230, -172}, {335, -24}, {335, -98}, {335, -172} });
        break;
    case 3:
        ::DrawAlgorithm({ {{18, 6}, {415, -46}}, {{6, 191}, {427, -46}}, {{58, 6}, {374, -231}}, {{111, 6}, {269, -9}}, {{6, 168}, {269, -9}}, {{6, 228}, {374, -9}} },
                        { {230, -24}, {230, -98}, {230, -172}, {335, -24}, {335, -98}, {335, -172} });
        break;
    case 4:
        ::DrawAlgorithm({ {{18, 6}, {467, -120}}, {{6, 43}, {479, -120}}, {{58, 6}, {427, -157}}, {{216, 6}, {217, -9}}, {{6, 94}, {217, -9}}, {{6, 94}, {322, -9}}, {{6, 154}, {427, -9}} },
                        { {177, -24}, {177, -98}, {282, -24}, {282, -98}, {387, -24}, {387, -98} });
    break;
    case 5:
        ::DrawAlgorithm({ {{18, 6}, {467, -46}}, {{6, 117}, {479, -46}}, {{58, 6}, {427, -157}}, {{216, 6}, {217, -9}}, {{6, 94}, {217, -9}}, {{6, 94}, {322, -9}}, {{6, 154}, {427, -9}} },
                        { {177, -24}, {177, -98}, {282, -24}, {282, -98}, {387, -24}, {387, -98} });
        break;
    case 6:
        ::DrawAlgorithm({ {{18, 6}, {467, -194}}, {{6, 43}, {479, -194}}, {{58, 6}, {427, -231}}, {{111, 6}, {217, -9}}, {{111, 6}, {322, -83}}, {{6, 94}, {217, -9}}, {{6, 94}, {322, -9}}, {{6, 154}, {427, -83}} },
                        { {177, -24}, {177, -98}, {282, -24}, {282, -98}, {387, -98}, {387, -172} });
        break;
    case 7:
        ::DrawAlgorithm({ {{18, 6}, {362, -120}}, {{6, 43}, {374, -120}}, {{58, 6}, {322, -157}}, {{111, 6}, {217, -9}}, {{111, 6}, {322, -83}}, {{6, 94}, {217, -9}}, {{6, 154}, {322, -9}}, {{6, 94}, {427, -83}} },
                        { {177, -24}, {177, -98}, {282, -24}, {282, -98}, {387, -98}, {387, -172} });
        break;
    case 8:
        ::DrawAlgorithm({ {{18, 6}, {257, -120}}, {{6, 43}, {269, -120}}, {{58, 6}, {217, -157}}, {{111, 6}, {217, -9}}, {{111, 6}, {322, -83}}, {{6, 154}, {217, -9}}, {{6, 94}, {322, -9}}, {{6, 94}, {427, -83}} },
                        { {177, -24}, {177, -98}, {282, -24}, {282, -98}, {387, -98}, {387, -172} });
        break;
    case 9:
        ::DrawAlgorithm({ {{18, 6}, {467, -194}}, {{6, 43}, {479, -194}}, {{58, 6}, {427, -231}}, {{111, 6}, {322, -9}}, {{111, 6}, {217, -83}}, {{6, 20}, {217, -83}}, {{6, 94}, {322, -9}}, {{6, 228}, {427, -9}} },
                        { {387, -24}, {387, -98}, {387, -172}, {282, -24}, {177, -98}, {282, -98} });
        break;
    case 10:
        ::DrawAlgorithm({ {{18, 6}, {362, -120}}, {{6, 43}, {374, -120}}, {{58, 6}, {322, -157}}, {{111, 6}, {322, -9}}, {{111, 6}, {217, -83}}, {{6, 20}, {217, -83}}, {{6, 154}, {322, -9}}, {{6, 168}, {427, -9}} },
                        { {387, -24}, {387, -98}, {387, -172}, {282, -24}, {177, -98}, {282, -98} });
        break;
    case 11:
        ::DrawAlgorithm({ {{18, 6}, {520, -120}}, {{6, 43}, {532, -120}}, {{58, 6}, {480, -157}}, {{216, 6}, {270, -9}}, {{216, 6}, {165, -83}}, {{6, 20}, {165, -83}}, {{6, 94}, {270, -9}}, {{6, 20}, {375, -83}}, {{6, 154}, {480, -9}} },
                        { {440, -24}, {440, -98}, {230, -24}, {125, -98}, {230, -98}, {335, -98} });
        break;
    case 12:
        ::DrawAlgorithm({ {{18, 6}, {415, -120}}, {{6, 43}, {427, -120}}, {{58, 6}, {375, -157}}, {{216, 6}, {270, -9}}, {{216, 6}, {165, -83}}, {{6, 20}, {165, -83}}, {{6, 94}, {270, -9}}, {{6, 80}, {375, -83}}, {{6, 94}, {480, -9}} },
                        { {440, -24}, {440, -98}, {230, -24}, {125, -98}, {230, -98}, {335, -98} });
        break;
    case 13:
        ::DrawAlgorithm({ {{18, 6}, {467, -194}}, {{6, 43}, {479, -194}}, {{58, 6}, {427, -231}}, {{111, 6}, {217, -9}}, {{111, 6}, {322, -157}}, {{6, 94}, {217, -9}}, {{6, 168}, {322, -9}}, {{6, 80}, {427, -157}} },
                        { {177, -24}, {177, -98}, {282, -24}, {282, -98}, {282, -172}, {387, -172} });
        break;
    case 14:
        ::DrawAlgorithm({ {{18, 6}, {257, -120}}, {{6, 43}, {269, -120}}, {{58, 6}, {217, -157}}, {{111, 6}, {217, -9}}, {{111, 6}, {322, -157}}, {{6, 154}, {217, -9}}, {{6, 168}, {322, -9}}, {{6, 20}, {427, -157}} },
                        { {177, -24}, {177, -98}, {282, -24}, {282, -98}, {282, -172}, {387, -172} });
        break;
    case 15:
        ::DrawAlgorithm({ {{18, 6}, {467, -194}}, {{6, 43}, {479, -194}}, {{58, 6}, {427, -231}}, {{216, 6}, {217, -83}}, {{6, 20}, {217, -83}}, {{6, 168}, {322, -9}}, {{6, 154}, {427, -83}} },
                        { {282, -24}, {177, -98}, {282, -98}, {282, -172}, {387, -98}, {387, -172} });
        break;
    case 16:
        ::DrawAlgorithm({ {{18, 6}, {257, -120}}, {{6, 43}, {269, -120}}, {{58, 6}, {217, -157}}, {{216, 6}, {217, -83}}, {{6, 80}, {217, -83}}, {{6, 168}, {322, -9}}, {{6, 94}, {427, -83}} },
                        { {282, -24}, {177, -98}, {282, -98}, {282, -172}, {387, -98}, {387, -172} });
        break;
    case 17:
        ::DrawAlgorithm({ {{18, 6}, {362, -120}}, {{6, 43}, {374, -120}}, {{58, 6}, {322, -157}}, {{216, 6}, {217, -83}}, {{6, 20}, {217, -83}}, {{6, 154}, {322, -9}}, {{6, 168}, {427, -83}} },
                        { {282, -24}, {177, -98}, {282, -98}, {387, -98}, {387, -172}, {387, -246} });
        break;
    case 18:
        ::DrawAlgorithm({ {{18, 6}, {362, -120}}, {{6, 43}, {374, -120}}, {{58, 6}, {322, -157}}, {{216, 6}, {217, -9}}, {{111, 6}, {322, -83}}, {{6, 168}, {217, -9}}, {{6, 154}, {322, -9}}, {{6, 80}, {427, -9}} },
                        { {177, -24}, {177, -98}, {177, -172}, {282, -24}, {387, -24}, {282, -98} });
        break;
    case 19:
        ::DrawAlgorithm({ {{18, 6}, {205, -120}}, {{6, 43}, {217, -120}}, {{58, 6}, {165, -157}}, {{321, 6}, {165, -9}}, {{111, 6}, {165, -83}}, {{111, 6}, {375, -83}}, {{6, 154}, {165, -9}}, {{6, 80}, {270, -9}}, {{6, 20}, {375, -83}}, {{6, 94}, {480, -9}} },
                        { {125, -24}, {230, -24}, {125, -98}, {440, -24}, {335, -98}, {440, -98} });
        break;
    case 20:
        ::DrawAlgorithm({ {{18, 6}, {205, -120}}, {{6, 43}, {217, -120}}, {{58, 6}, {165, -157}}, {{321, 6}, {165, -9}}, {{111, 6}, {165, -83}}, {{111, 6}, {375, -83}}, {{6, 154}, {165, -9}}, {{6, 80}, {270, -9}}, {{6, 94}, {375, -9}}, {{6, 80}, {480, -9}} },
                        { {125, -24}, {230, -24}, {125, -98}, {335, -24}, {440, -24}, {335, -98} });
        break;
    case 21:
        ::DrawAlgorithm({ {{18, 6}, {415, -120}}, {{6, 43}, {427, -120}}, {{58, 6}, {375, -157}}, {{321, 6}, {165, -9}}, {{216, 6}, {270, -83}}, {{6, 94}, {165, -9}}, {{6, 80}, {270, -9}}, {{6, 154}, {375, -9}}, {{6, 80}, {480, -9}} },
                        { {125, -24}, {125, -98}, {230, -24}, {335, -24}, {440, -24}, {335, -98} });
        break;
    case 22:
        ::DrawAlgorithm({ {{18, 6}, {415, -120}}, {{6, 43}, {427, -120}}, {{58, 6}, {375, -157}}, {{321, 6}, {165, -9}}, {{111, 6}, {375, -83}}, {{6, 20}, {165, -9}}, {{6, 94}, {270, -9}}, {{6, 154}, {375, -9}}, {{6, 80}, {480, -9}} },
                        { {125, -24}, {230, -24}, {230, -98}, {335, -24}, {440, -24}, {335, -98} });
        break;
    case 23:
        ::DrawAlgorithm({ {{18, 6}, {467, -120}}, {{6, 43}, {479, -120}}, {{58, 6}, {427, -157}}, {{426, 6}, {112, -9}}, {{216, 6}, {322, -83}}, {{6, 20}, {112, -9}}, {{6, 20}, {217, -9}}, {{6, 80}, {322, -9}}, {{6, 154}, {427, -9}}, {{6, 80}, {532, -9}} },
                        { {72, -24}, {177, -24}, {282, -24}, {387, -24}, {492, -24}, {387, -98} });
        break;
    case 24:
        ::DrawAlgorithm({ {{18, 6}, {467, -120}}, {{6, 43}, {479, -120}}, {{58, 6}, {427, -157}}, {{426, 6}, {112, -9}}, {{111, 6}, {427, -83}}, {{6, 20}, {112, -9}}, {{6, 20}, {217, -9}}, {{6, 20}, {322, -9}}, {{6, 154}, {427, -9}}, {{6, 80}, {532, -9}} },
                        { {72, -24}, {177, -24}, {282, -24}, {387, -24}, {492, -24}, {387, -98} });
        break;
    case 25:
        ::DrawAlgorithm({ {{18, 6}, {520, -120}}, {{6, 43}, {532, -120}}, {{58, 6}, {480, -157}}, {{321, 6}, {165, -9}}, {{111, 6}, {375, -83}}, {{6, 20}, {165, -9}}, {{6, 94}, {270, -9}}, {{6, 20}, {375, -83}}, {{6, 154}, {480, -9}} },
                        { {125, -24}, {230, -24}, {230, -98}, {440, -24}, {335, -98}, {440, -98} });
        break;
    case 26:
        ::DrawAlgorithm({ {{18, 6}, {310, -120}}, {{6, 43}, {322, -120}}, {{58, 6}, {270, -157}}, {{321, 6}, {165, -9}}, {{111, 6}, {375, -83}}, {{6, 20}, {165, -9}}, {{6, 154}, {270, -9}}, {{6, 20}, {375, -83}}, {{6, 94}, {480, -9}} },
                        { {125, -24}, {230, -24}, {230, -98}, {440, -24}, {335, -98}, {440, -98} });
        break;
    case 27:
        ::DrawAlgorithm({ {{18, 6}, {362, -194}}, {{6, 43}, {374, -194}}, {{58, 6}, {322, -231}}, {{216, 6}, {217, -9}}, {{6, 94}, {217, -9}}, {{6, 228}, {322, -9}}, {{6, 20}, {427, -9}} },
                        { {177, -24}, {177, -98}, {282, -24}, {282, -98}, {282, -172}, {387, -24} });
        break;
    case 28:
        ::DrawAlgorithm({ {{18, 6}, {520, -120}}, {{6, 43}, {532, -120}}, {{58, 6}, {480, -157}}, {{321, 6}, {165, -9}}, {{6, 20}, {165, -9}}, {{6, 20}, {270, -9}}, {{6, 94}, {375, -9}}, {{6, 154}, {480, -9}} },
                        { {125, -24}, {230, -24}, {335, -24}, {335, -98}, {440, -24}, {440, -98} });
        break;
    case 29:
        ::DrawAlgorithm({ {{18, 6}, {415, -194}}, {{6, 43}, {427, -194}}, {{58, 6}, {375, -231}}, {{321, 6}, {165, -9}}, {{6, 20}, {165, -9}}, {{6, 20}, {270, -9}}, {{6, 228}, {375, -9}}, {{6, 20}, {480, -9}} },
                        { {125, -24}, {230, -24}, {335, -24}, {335, -98}, {335, -172}, {440, -24} });
        break;
    case 30:
        ::DrawAlgorithm({ {{18, 6}, {572, -120}}, {{6, 43}, {584, -120}}, {{58, 6}, {532, -157}}, {{426, 6}, {112, -9}}, {{6, 20}, {112, -9}}, {{6, 20}, {217, -9}}, {{6, 20}, {322, -9}}, {{6, 20}, {427, -9}}, {{6, 154}, {532, -9}} },
                        { {72, -24}, {177, -24}, {282, -24}, {387, -24}, {492, -24}, {492, -98} });
        break;
    case 31:
        ::DrawAlgorithm({ {{18, 6}, {625, -46}}, {{6, 43}, {637, -46}}, {{58, 6}, {585, -83}}, {{531, 6}, {60, -9}}, {{6, 20}, {60, -9}}, {{6, 20}, {165, -9}}, {{6, 20}, {270, -9}}, {{6, 20}, {375, -9}}, {{6, 20}, {480, -9}}, {{6, 80}, {585, -9}} },
                        { {20, -24}, {125, -24}, {230, -24}, {335, -24}, {440, -24}, {545, -24} });
        break;
  }

  Settings::Instance().SetFmEngineAlgorithm(static_cast<uint8_t>(algorithm));
}

void OnSineWaveButtonClicked(lv_event_t * e) {
  Settings::Instance().SetFmEngineToneGeneratorType(Settings::ToneGeneratorType::kSineWave);
}

void OnSquareWaveButtonClicked(lv_event_t * e) {
  Settings::Instance().SetFmEngineToneGeneratorType(Settings::ToneGeneratorType::kSquareWave);
}

void OnTriangleWaveButtonClicked(lv_event_t * e) {
  Settings::Instance().SetFmEngineToneGeneratorType(Settings::ToneGeneratorType::kTriangleWave);
}

void OnSawtoothWaveButtonClicked(lv_event_t * e) {
  Settings::Instance().SetFmEngineToneGeneratorType(Settings::ToneGeneratorType::kSawtoothWave);
}

void OnAttackArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetAdsrEnvelopeAttack(static_cast<uint8_t>(::GetArcValue(e)));
}

void OnDecayArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetAdsrEnvelopeDecay(static_cast<uint8_t>(::GetArcValue(e)));
}

void OnSustainArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetAdsrEnvelopeSustain(::GetArcValue(e) / 100.0);
}

void OnReleaseArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetAdsrEnvelopeRelease(static_cast<uint8_t>(::GetArcValue(e)));
}

void OnOperator1RatioArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorRatio(0L, ::GetOperatorRatio(e));
}

void OnOperator2RatioArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorRatio(1L, ::GetOperatorRatio(e));
}

void OnOperator3RatioArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorRatio(2L, ::GetOperatorRatio(e));
}

void OnOperator4RatioArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorRatio(3L, ::GetOperatorRatio(e));
}

void OnOperator5RatioArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorRatio(4L, ::GetOperatorRatio(e));
}

void OnOperator6RatioArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorRatio(5L, ::GetOperatorRatio(e));
}

void OnOperator1LevelArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorLevel(0L, ::GetOperatorLevel(e));
}

void OnOperator2LevelArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorLevel(1L, ::GetOperatorLevel(e));
}

void OnOperator3LevelArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorLevel(2L, ::GetOperatorLevel(e));
}

void OnOperator4LevelArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorLevel(3L, ::GetOperatorLevel(e));
}

void OnOperator5LevelArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorLevel(4L, ::GetOperatorLevel(e));
}

void OnOperator6LevelArcValueChanged(lv_event_t * e) {
  Settings::Instance().SetFmEngineOperatorLevel(5L, ::GetOperatorLevel(e));
}

void OnMidiRollerValueChanged(lv_event_t * e) {
  Settings::Instance().SetMidiInputChannel(static_cast<uint8_t>(::GetRollerSelected(e)));
}